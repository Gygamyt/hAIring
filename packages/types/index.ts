/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/prep/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Анализ данных кандидата для подготовки к интервью
         * @description Принимает резюме, фидбэк и ссылку на требования для генерации плана интервью.
         */
        post: operations["analyze_preparation_endpoint_api_prep__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/results/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Запустить анализ результатов интервью
         * @description Принимает данные для анализа, ставит задачу в очередь и немедленно возвращает ее ID.
         */
        post: operations["create_analysis_task_api_results__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/results/status/{job_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Проверить статус задачи анализа
         * @description Возвращает текущий статус задачи и результат, если она успешно завершена.
         */
        get: operations["get_analysis_status_api_results_status__job_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description A simple endpoint to check if the server is running.
         */
        get: operations["read_root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Version */
        get: operations["get_version_version_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Body_analyze_preparation_endpoint_api_prep__post */
        Body_analyze_preparation_endpoint_api_prep__post: {
            /**
             * Cv File
             * Format: binary
             * @description Резюме кандидата (.txt, .pdf, .docx).
             */
            cv_file: string;
            /**
             * Feedback Text
             * @description Фидбэк от рекрутера в виде текста.
             */
            feedback_text: string;
            /**
             * Requirements Link
             * @description Ссылка на Google Таблицу с требованиями.
             */
            requirements_link: string;
        };
        /** Body_create_analysis_task_api_results__post */
        Body_create_analysis_task_api_results__post: {
            /**
             * Cv File
             * @description Резюме кандидата (.pdf, .docx, .txt).
             */
            cv_file?: string | null;
            /**
             * Video Link
             * @description Ссылка на видеозапись собеседования.
             */
            video_link: string;
            /**
             * Competency Matrix Link
             * @description Ссылка на матрицу компетенций QA/AQA.
             */
            competency_matrix_link: string;
            /**
             * Department Values Link
             * @description Ссылка на ценности департамента.
             */
            department_values_link: string;
            /**
             * Employee Portrait Link
             * @description Ссылка на портрет сотрудника.
             */
            employee_portrait_link: string;
            /**
             * Job Requirements Link
             * @description Ссылка на требования к вакансии.
             */
            job_requirements_link: string;
        };
        /** Conclusion */
        Conclusion: {
            /** Summary */
            summary: string;
            /** Recommendations */
            recommendations: string;
            /** Interview Topics */
            interview_topics: string[];
            /** Values Assessment */
            values_assessment: string;
        };
        /** ErrorResponse */
        ErrorResponse: {
            /** Detail */
            detail: string;
            /** Error Code */
            error_code?: string | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** JobStatusResponse */
        JobStatusResponse: {
            /** Job Id */
            job_id: string;
            /** Status */
            status: string;
            /** Result */
            result?: {
                [key: string]: unknown;
            } | null;
            /** Error */
            error?: string | null;
        };
        /** MatchingItem */
        MatchingItem: {
            /** Criterion */
            criterion: string;
            /** Match */
            match: string;
            /** Comment */
            comment: string;
        };
        /** PreparationAnalysis */
        PreparationAnalysis: {
            /** Message */
            message: string;
            /**
             * Success
             * @default true
             */
            success: boolean;
            report: components["schemas"]["Report"];
        };
        /** Report */
        Report: {
            /** First Name */
            first_name?: string | null;
            /** Last Name */
            last_name?: string | null;
            /** Matching Table */
            matching_table: components["schemas"]["MatchingItem"][];
            /** Candidate Profile */
            candidate_profile: string;
            conclusion: components["schemas"]["Conclusion"];
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    analyze_preparation_endpoint_api_prep__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_analyze_preparation_endpoint_api_prep__post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PreparationAnalysis"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    create_analysis_task_api_results__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_create_analysis_task_api_results__post"];
            };
        };
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobStatusResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_analysis_status_api_results_status__job_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobStatusResponse"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_version_version_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
